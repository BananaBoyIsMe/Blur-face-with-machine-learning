# -*- coding: utf-8 -*-
"""cnn_face_blur.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ItMWpVjK7ffH-9CcmXK8CINYD87trXqq
"""

import cv2
import os
import numpy as np
import dlib
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/gdrive')

data_path = "/content/gdrive/My Drive/image_project/"

!pip install mtcnn

from mtcnn import MTCNN

image = cv2.imread(os.path.join(data_path, "face1.jpg"), cv2.IMREAD_COLOR)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image_rgb)
plt.axis('off')
plt.show()

detector = MTCNN()

# Detect faces
faces = detector.detect_faces(image_rgb)

# Draw bounding boxes around faces and blur them
for face in faces:
    x, y, w, h = face['box']
    # print(face['box'])
    # print(image[y:y+h, x:x+w])
    face_region = image[y:y+h, x:x+w]
    blurred_face = cv2.GaussianBlur(face_region, (199, 199), 50)
    image[y:y+h, x:x+w] = blurred_face

image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

plt.imshow(image_rgb)
plt.axis('off')
plt.show()

!pip install gradio

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import gradio as gr
from mtcnn import MTCNN

detector = MTCNN()

# Function to process images and blur faces
def blur_faces(image):
    image = np.array(image)

    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    faces = detector.detect_faces(image)

    for face in faces:
        x, y, w, h = face['box']

        x, y, w, h = max(0, x), max(0, y), max(1, w), max(1, h)

        face_region = image_bgr[y:y+h, x:x+w]

        blurred_face = cv2.GaussianBlur(face_region, (199, 199), 50)

        image_bgr[y:y+h, x:x+w] = blurred_face

    image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)

    return image_rgb

# Create Gradio Interface
iface = gr.Interface(
    fn=blur_faces,
    inputs=gr.Image(type="pil"),
    outputs=gr.Image(type="numpy"),
    title="Face Blur Web App",
    description="Upload an image, and this app will detect and blur faces using MTCNN!"
)

# Launch the Gradio App
iface.launch(debug=True)

import cv2
import numpy as np
import gradio as gr
from mtcnn import MTCNN

# Initialize face detector
detector = MTCNN()
detected_faces = []
blurred_faces = set()
original_image = None
blurred_image = None  # Store a version with only blurring (no boxes)

# Function to detect faces
def detect_faces(image):
    global detected_faces, original_image, blurred_faces, blurred_image
    image = np.array(image)
    original_image = image.copy()
    blurred_image = image.copy()  # Store clean version without boxes
    blurred_faces.clear()

    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    detected_faces = detector.detect_faces(image)

    for idx, face in enumerate(detected_faces):
        x, y, w, h = face['box']
        x, y, w, h = max(0, x), max(0, y), max(1, w), max(1, h)

        # Draw bounding box (only for display)
        cv2.rectangle(image_bgr, (x, y), (x + w, y + h), (0, 255, 0), 3)
        cv2.putText(image_bgr, str(idx + 1), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)
    return image_rgb

# Function to toggle blur on selected face
def toggle_blur_face(image, evt: gr.SelectData):
    global detected_faces, original_image, blurred_faces, blurred_image
    if not detected_faces:
        return image  # No faces detected

    image = np.array(image)
    image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    click_x, click_y = evt.index[0], evt.index[1]

    for idx, face in enumerate(detected_faces):
        x, y, w, h = face['box']
        if x <= click_x <= x + w and y <= click_y <= y + h:
            face_id = idx

            original_bgr = cv2.cvtColor(original_image, cv2.COLOR_RGB2BGR)

            if face_id in blurred_faces:
                image_bgr[y:y+h, x:x+w] = original_bgr[y:y+h, x:x+w]
                blurred_faces.remove(face_id)
                blurred_image[y:y+h, x:x+w] = original_image[y:y+h, x:x+w]
            else:
                clean_patch = original_bgr[y:y+h, x:x+w]
                blurred_face_bgr = cv2.GaussianBlur(clean_patch, (99, 99), 30)
                image_bgr[y:y+h, x:x+w] = blurred_face_bgr
                blurred_face_rgb = cv2.cvtColor(blurred_face_bgr, cv2.COLOR_BGR2RGB)
                blurred_image[y:y+h, x:x+w] = blurred_face_rgb
                blurred_faces.add(face_id)

            break

    image_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)
    return image_rgb


# Function to reset image
def reset_image():
    global original_image, blurred_faces, blurred_image, detected_faces
    if original_image is None:
        return None
    blurred_faces.clear()
    blurred_image = original_image.copy()

    image_bgr = cv2.cvtColor(original_image.copy(), cv2.COLOR_RGB2BGR)
    for idx, face in enumerate(detected_faces):
        x, y, w, h = face['box']
        x, y, w, h = max(0, x), max(0, y), max(1, w), max(1, h)
        cv2.rectangle(image_bgr, (x, y), (x + w, y + h), (0, 255, 0), 3)
        cv2.putText(image_bgr, str(idx + 1), (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    reset_rgb = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2RGB)
    return reset_rgb


# Function to return the blurred image for display
def show_blurred_image():
    return blurred_image.copy() if blurred_image is not None else None

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("# Face Blur App ðŸŽ­ (Click on face to Blur/Unblur Faces)")

    with gr.Row():
      image_input = gr.Image(type="pil", label="Upload an Image")
      image_output = gr.Image(type="numpy", label="Detected Faces", interactive=True)

    detect_button = gr.Button("Detect Faces Before Blurring Them Yourself!")
    reset_button = gr.Button("Reset Image!")
    show_blur_button = gr.Button("Show Blurred Image Result to Downlaod!")

    # New image preview for the blurred result
    blurred_image_output = gr.Image(type="numpy", label="Blurred Image")

    detect_button.click(detect_faces, inputs=image_input, outputs=image_output)
    reset_button.click(reset_image, outputs=image_output)

    image_output.select(toggle_blur_face, inputs=image_output, outputs=image_output)
    show_blur_button.click(show_blurred_image, outputs=blurred_image_output)

# Launch App
demo.launch(debug=True)
